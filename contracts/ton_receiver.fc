#include "imports/stdlib.fc";

global slice owner;
const min_ton_balance = 500000000;
const op::receive_ton = 0x1d9c7dcc;
const op::withdraw_ton = 0x37726bdb;

() save_data() impure inline {
    set_data(begin_cell().store_slice(owner).end_cell());
}

() load_data() impure inline {
    slice ds = get_data().begin_parse();
    owner = ds~load_msg_addr();
    ds.end_parse();
}

() send_empty_messsage(slice to, int value, int mode) impure inline_ref {
    cell msg = begin_cell().store_uint(0x18, 6).store_slice(to).store_coins(value).store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1).end_cell();
    send_raw_message(msg,mode);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if(in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if(flags & 1) {
        return ();
    }

    slice sender = cs~load_msg_addr();

    load_data();

    int op = in_msg_body~load_uint(32);

    if(op == op::receive_ton) {
        if(msg_value < 2000000000) {
            int forward_fee_reserve = 10000000; 
            int value_to_return = max(0, msg_value - forward_fee_reserve);
            send_empty_messsage(sender, value_to_return, 1);
        }
        return ();
    }

    if(op == op::withdraw_ton) {
        int amount_to_withdraw = in_msg_body~load_uint(64);
        throw_unless(100, equal_slices_bits(owner,sender));
        var [balance, _] = get_balance();
        throw_unless(101, balance >= amount_to_withdraw);
        int allow_withdraw = min(amount_to_withdraw, balance - min_ton_balance);
        send_empty_messsage(sender, allow_withdraw, 1);
        return ();
    }

    throw(0xffff);
}

slice get_owner() method_id {
    load_data();
    return owner;
}

int balance() method_id {
    var [balance, _] = get_balance();
    return balance; 
}